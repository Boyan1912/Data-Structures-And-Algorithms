Variations (with repetitions)

n × n × ... × n (k times) = Math.Pow(n, k);

static void GenerateVariationsWithRepetitions(int index)
	{
		if (index >= k)
		{
			PrintVariations();
		}
		else
		{
			for (int i = 0; i < n; i++)
			{
				arr[index] = i;
				GenerateVariationsWithRepetitions(index + 1);
			}
		}
	}


Variations without Repetition

static void GenerateVariationsNoRepetitions(int index)
	{
		if (index >= k)
		{
			PrintVariations();
		}
		else
		{
			for (int i = 0; i < n; i++)
			{
				if (!used[i])
				{
					used[i] = true;
					arr[index] = i;
					GenerateVariationsNoRepetitions(index + 1);
					used[i] = false;
				}
			}
		}
	}


Permutations
n!

static void GeneratePermutations<T>(T[] arr, int k)
	{
		if (k >= arr.Length)
		{
			Print(arr);
		}
		else
		{
			GeneratePermutations(arr, k + 1);
			for (int i = k + 1; i < arr.Length; i++)
			{
				Swap(ref arr[k], ref arr[i]);
				GeneratePermutations(arr, k + 1);
				Swap(ref arr[k], ref arr[i]);
			}
	}


Permutations with repetitions:
https://github.com/TelerikAcademy/Data-Structures-and-Algorithms/blob/master/08.%20Combinatorics/demos/Permutations-with-Reps/PermutationsGeneratorWithReps.cs


Combinations Without Repetitions

static void GenerateCombinationsNoRepetitions(int index, int start)
	{
		if (index >= k)
		{
			PrintVariations();
		}
		else
		{
			for (int i = start; i < n; i++)
			{
				arr[index] = i;
				GenerateCombinationsNoRepetitions(index + 1, i + 1);
			}
		}
	}


Combinations with Repetition


